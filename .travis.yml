language: python
python:
  - "2.7"
#  - "3.5"
cache:
  - pip
services:
  - docker
addons:
  apt:
    packages:
    - python-pip

env:
  - ANSIBLE_VERSION: "2.2.1"
  - distribution: Ubuntu
    distribution_version: yakkety
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker
  - distribution: Ubuntu
    distribution_version: xenial
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker
  - distribution: Ubuntu
    distribution_version: trusty
    init: /sbin/init
    run_opts: ""
    ANSIBLE_VERSION: docker
  - distribution: Ubuntu
    distribution_version: precise
    init: /sbin/init
    run_opts: ""
    ANSIBLE_VERSION: docker
  - distribution: EL
    distribution_version: "7"
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker
  - distribution: EL
    distribution_version: "6"
    init: /sbin/init
    run_opts: ""
    ANSIBLE_VERSION: docker
  - distribution: Debian
    distribution_version: jessie
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker
  - distribution: Debian
    distribution_version: wheezy
    init: /sbin/init
    run_opts: ""
    ANSIBLE_VERSION: docker
  - distribution: Fedora
    distribution_version: "24"
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker
  - distribution: Fedora
    distribution_version: "23"
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    ANSIBLE_VERSION: docker


install:
  - if [ "${ANSIBLE_VERSION}" != "docker" ]; then sudo pip install ansible==$ANSIBLE_VERSION ; fi
  - if [ "${ANSIBLE_VERSION}" == "docker" ]; then docker pull ansiblecheck/ansiblecheck:${distribution,,}-${distribution_version} ; fi

before_script:
  - if [ "${ANSIBLE_VERSION}" != "docker" ]; then printf '[defaults]\nroles_path=../\nhost_key_checking = False\n[ssh_connection]\npipelining = True\n' >ansible.cfg ; fi
  - if [ "${ANSIBLE_VERSION}" != "docker" ]; then ansible --version ; fi

script:
  # Local Testing Commands
  - if [ "${ANSIBLE_VERSION}" != "docker" ]; then ansible-playbook -i tests/inventory tests/test.yml --connection=local --sudo -v; fi

  # Docker Testing Commands
  - if [ "${ANSIBLE_VERSION}" == "docker" ]; then container_id=$(mktemp) ; fi
  # Start The Built Container In The Background
  - if [ "${ANSIBLE_VERSION}" == "docker" ]; then docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ansiblecheck/ansiblecheck:"${distribution,,}"-"${distribution_version}" "${init}" > "${container_id}" ; fi
  # Ansible syntax check.
  - if [ "${ANSIBLE_VERSION}" == "docker" ]; then docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --syntax-check ; fi
  # Test role.
  - if [ "${ANSIBLE_VERSION}" == "docker" ]; then docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml -v ; fi

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
